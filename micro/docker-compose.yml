services:
  mysql:                                                                          # 数据库(主库)
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_DATABASE: micro_cms                                                   # 数据库(该容器会自动创建改数据库)
      MYSQL_ROOT_PASSWORD: 2214380963Wx!!                                         # 添加 MySQL 的 root 密码
    ports:
      - "3306:3306"                                                               # 将容器的 3306 端口映射到宿主机的 3306 端口
    networks:
      - microservices-network                                                     # 确保容器在同一个网络环境中
    volumes:
      - type: bind
        source: ./sql/master.cnf                                                  # 挂载配置文件(配置文件所在位置)
        target: /etc/mysql/conf.d/master.cnf                                      # 挂载配置文件(配置文件被挂载到容器中的位置)
        read_only: true                                                           # 只读
        consistency: consistent                                                   # 一致性(保了卷被挂载为具有一致性)
      - type: bind
        source: ./sql/master_init.sql                                             # 挂载初始化 SQL 文件(初始化 SQL 文件所在位置)
        target: /docker-entrypoint-initdb.d/master_init.sql                       # 挂载初始化 SQL 文件(配置文件被挂载到容器中的位置)
        read_only: true                                                           # 只读
        consistency: consistent                                                   # 一致性(保了卷被挂载为具有一致性)
      - type: bind
        source: ./sql/init-master.sh                                              # 挂载数据文件(数据文件所在位置)
        target: /docker-entrypoint-initdb.d/init-master.sh                        # 挂载数据文件(配置文件被挂载到容器中的位置)
        read_only: true                                                           # 只读
        consistency: consistent                                                   # 一致性(保了卷被挂载为具有一致性)
      - type: bind
        source: ./sql/data_master                                                 # 数据卷名称
        target: /var/lib/mysql                                                    # 数据卷被挂载到容器中的位置

  mysql-slave:                                                                    # 数据库(从库库)
    image: mysql:8.0
    container_name: mysql-slave
    environment:
      MYSQL_DATABASE: micro_cms
      MYSQL_ROOT_PASSWORD: 2214380963Wx!!
    ports:
      - "3307:3306"
    volumes:
      - ./sql/slave.cnf:/etc/mysql/conf.d/slave.cnf:ro,consistent
      - ./sql/master_init.sql:/docker-entrypoint-initdb.d/master_init.sql:ro,consistent
      - ./sql/init-slave.sh:/docker-entrypoint-initdb.d/init-slave.sh:ro,consistent
      - ./sql/data_slave:/var/lib/mysql
    depends_on:
      - mysql
    command:
      - --default-authentication-plugin=mysql_native_password
      - --server-id=2
      - --relay-log=relay-log
      - --log-bin=mysql-bin
      - --read-only=1
      - --skip-slave-start
    networks:
      - microservices-network

  redis:
    image: redis:latest
    container_name: redis
    networks:
      - microservices-network

  etcd:
    image: quay.io/coreos/etcd:v3.5.0
    container_name: etcd
    networks:
      - microservices-network
    ports:
      - "2379"
      - "2380"
    command: [
      "etcd",
      "--name", "etcd0",
      "--advertise-client-urls", "http://0.0.0.0:2379",
      "--listen-client-urls", "http://0.0.0.0:2379",
      "--initial-advertise-peer-urls", "http://0.0.0.0:2380",
      "--listen-peer-urls", "http://0.0.0.0:2380",
      "--initial-cluster", "etcd0=http://0.0.0.0:2380"
    ]

  # RPC 服务
  captcha-rpc-service:
    build:
      context: .
      dockerfile: ./rpc/captcha/Dockerfile
    container_name: captcha-rpc-service
    ports:
      - "8081"
    depends_on:
      - mysql
      - redis
      - etcd
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]  # 健康检查命令
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 10s
    restart: always

  user-rpc-service:
    build:
      context: .
      dockerfile: ./rpc/user/Dockerfile
    container_name: user-rpc-service
    ports:
      - "8083"
    depends_on:
      - mysql
      - redis
      - etcd
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083"]
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 10s
    restart: always

  role-rpc-service:
    build:
      context: .
      dockerfile: ./rpc/role/Dockerfile
    container_name: role-rpc-service
    ports:
      - "8082"
    depends_on:
      - mysql
      - redis
      - etcd
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082"]
      interval: 10s
      retries: 5
    restart: always

  # API 服务
  auth-service:
    build:
      context: .
      dockerfile: ./api/auth/Dockerfile
    container_name: auth-service
    ports:
      - "8888"
    depends_on:
      - etcd
      - mysql
      - redis
      - captcha-rpc-service
      - user-rpc-service
      - role-rpc-service
    networks:
      - microservices-network  # 将服务连接到自定义网络
    environment:
      REDIS_HOST: redis  # 使用服务名称作为主机名
      REDIS_PORT: 6379
      ETCD_HOST: etcd
      ETCD_PORT: 2379
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888"]
    restart: always

  user-service:
    build:
      context: .
      dockerfile: ./api/user/Dockerfile
    container_name: user-service
    ports:
      - "8889"
    depends_on:
      - etcd
      - mysql
      - redis
      - captcha-rpc-service
      - user-rpc-service
      - role-rpc-service
    networks:
      - microservices-network
    environment:
      REDIS_HOST: redis   # 使用服务名称作为主机名
      REDIS_PORT: 6379
      ETCD_HOST: etcd
      ETCD_PORT: 2379
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8889"]
    restart: always

  nginx-proxy:
    image: nginx:latest  # 使用最新版本的 Nginx 镜像
    container_name: nginx-proxy
    ports:
      - "80:80"
    networks:
      - microservices-network
    depends_on:
      auth-service:
        condition: service_started
      user-service:
        condition: service_started
    volumes:
      - type: bind
        source: ./nginx.conf
        target: /etc/nginx/nginx.conf                                    # 挂载配置文件
        read_only: true
        consistency: consistent
networks:
  microservices-network:
    driver: bridge  # 使用默认的 Docker bridge 网络驱动

volumes:
  etcd-data:
