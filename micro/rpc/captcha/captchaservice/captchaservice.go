// Code generated by goctl. DO NOT EDIT.
// Source: captcha.proto

package captchaservice

import (
	"context"

	"micro/rpc/captcha/captcha"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GenerateCaptchaRequest  = captcha.GenerateCaptchaRequest
	GenerateCaptchaResponse = captcha.GenerateCaptchaResponse
	VerifyCaptchaRequest    = captcha.VerifyCaptchaRequest
	VerifyCaptchaResponse   = captcha.VerifyCaptchaResponse

	CaptchaService interface {
		GenerateCaptcha(ctx context.Context, in *GenerateCaptchaRequest, opts ...grpc.CallOption) (*GenerateCaptchaResponse, error)
		VerifyCaptcha(ctx context.Context, in *VerifyCaptchaRequest, opts ...grpc.CallOption) (*VerifyCaptchaResponse, error)
	}

	defaultCaptchaService struct {
		cli zrpc.Client
	}
)

func NewCaptchaService(cli zrpc.Client) CaptchaService {
	return &defaultCaptchaService{
		cli: cli,
	}
}

func (m *defaultCaptchaService) GenerateCaptcha(ctx context.Context, in *GenerateCaptchaRequest, opts ...grpc.CallOption) (*GenerateCaptchaResponse, error) {
	client := captcha.NewCaptchaServiceClient(m.cli.Conn())
	return client.GenerateCaptcha(ctx, in, opts...)
}

func (m *defaultCaptchaService) VerifyCaptcha(ctx context.Context, in *VerifyCaptchaRequest, opts ...grpc.CallOption) (*VerifyCaptchaResponse, error) {
	client := captcha.NewCaptchaServiceClient(m.cli.Conn())
	return client.VerifyCaptcha(ctx, in, opts...)
}
