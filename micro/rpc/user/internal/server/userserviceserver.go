// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package server

import (
	"context"

	"micro/rpc/user/internal/logic"
	"micro/rpc/user/internal/svc"
	"micro/rpc/user/userRPC"
)

type UserServiceServer struct {
	svcCtx *svc.ServiceContext
	userRPC.UnimplementedUserServiceServer
}

func NewUserServiceServer(svcCtx *svc.ServiceContext) *UserServiceServer {
	return &UserServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *UserServiceServer) CreateUser(ctx context.Context, in *userRPC.CreateUserRequest) (*userRPC.CommonResponse, error) {
	l := logic.NewCreateUserLogic(ctx, s.svcCtx)
	return l.CreateUser(in)
}

func (s *UserServiceServer) UpdateUser(ctx context.Context, in *userRPC.UpdateUserRequest) (*userRPC.CommonResponse, error) {
	l := logic.NewUpdateUserLogic(ctx, s.svcCtx)
	return l.UpdateUser(in)
}

func (s *UserServiceServer) GetUser(ctx context.Context, in *userRPC.GetUserRequest) (*userRPC.GetUserResponse, error) {
	l := logic.NewGetUserLogic(ctx, s.svcCtx)
	return l.GetUser(in)
}

func (s *UserServiceServer) GetUserByAccount(ctx context.Context, in *userRPC.GetUserByAccountRequest) (*userRPC.GetUserResponse, error) {
	l := logic.NewGetUserByAccountLogic(ctx, s.svcCtx)
	return l.GetUserByAccount(in)
}

func (s *UserServiceServer) GetUserList(ctx context.Context, in *userRPC.GetUserListRequest) (*userRPC.GetUserListResponse, error) {
	l := logic.NewGetUserListLogic(ctx, s.svcCtx)
	return l.GetUserList(in)
}

func (s *UserServiceServer) DeleteUser(ctx context.Context, in *userRPC.DeleteUserRequest) (*userRPC.CommonResponse, error) {
	l := logic.NewDeleteUserLogic(ctx, s.svcCtx)
	return l.DeleteUser(in)
}

func (s *UserServiceServer) UserAccountHasBeenExist(ctx context.Context, in *userRPC.UserAccountHasBeenExistRequest) (*userRPC.CommonResponse, error) {
	l := logic.NewUserAccountHasBeenExistLogic(ctx, s.svcCtx)
	return l.UserAccountHasBeenExist(in)
}

func (s *UserServiceServer) UserIDHasBeenExist(ctx context.Context, in *userRPC.DeleteUserRequest) (*userRPC.CommonResponse, error) {
	l := logic.NewUserIDHasBeenExistLogic(ctx, s.svcCtx)
	return l.UserIDHasBeenExist(in)
}
