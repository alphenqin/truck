// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userservice

import (
	"context"

	"micro/rpc/user/userRPC"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CommonResponse                 = userRPC.CommonResponse
	CreateUserRequest              = userRPC.CreateUserRequest
	DeleteUserRequest              = userRPC.DeleteUserRequest
	GetUserByAccountRequest        = userRPC.GetUserByAccountRequest
	GetUserListRequest             = userRPC.GetUserListRequest
	GetUserListResponse            = userRPC.GetUserListResponse
	GetUserRequest                 = userRPC.GetUserRequest
	GetUserResponse                = userRPC.GetUserResponse
	UpdateUserRequest              = userRPC.UpdateUserRequest
	UserAccountHasBeenExistRequest = userRPC.UserAccountHasBeenExistRequest

	UserService interface {
		CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CommonResponse, error)
		UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*CommonResponse, error)
		GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
		GetUserByAccount(ctx context.Context, in *GetUserByAccountRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
		GetUserList(ctx context.Context, in *GetUserListRequest, opts ...grpc.CallOption) (*GetUserListResponse, error)
		DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*CommonResponse, error)
		UserAccountHasBeenExist(ctx context.Context, in *UserAccountHasBeenExistRequest, opts ...grpc.CallOption) (*CommonResponse, error)
		UserIDHasBeenExist(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

func (m *defaultUserService) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	client := userRPC.NewUserServiceClient(m.cli.Conn())
	return client.CreateUser(ctx, in, opts...)
}

func (m *defaultUserService) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	client := userRPC.NewUserServiceClient(m.cli.Conn())
	return client.UpdateUser(ctx, in, opts...)
}

func (m *defaultUserService) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	client := userRPC.NewUserServiceClient(m.cli.Conn())
	return client.GetUser(ctx, in, opts...)
}

func (m *defaultUserService) GetUserByAccount(ctx context.Context, in *GetUserByAccountRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	client := userRPC.NewUserServiceClient(m.cli.Conn())
	return client.GetUserByAccount(ctx, in, opts...)
}

func (m *defaultUserService) GetUserList(ctx context.Context, in *GetUserListRequest, opts ...grpc.CallOption) (*GetUserListResponse, error) {
	client := userRPC.NewUserServiceClient(m.cli.Conn())
	return client.GetUserList(ctx, in, opts...)
}

func (m *defaultUserService) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	client := userRPC.NewUserServiceClient(m.cli.Conn())
	return client.DeleteUser(ctx, in, opts...)
}

func (m *defaultUserService) UserAccountHasBeenExist(ctx context.Context, in *UserAccountHasBeenExistRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	client := userRPC.NewUserServiceClient(m.cli.Conn())
	return client.UserAccountHasBeenExist(ctx, in, opts...)
}

func (m *defaultUserService) UserIDHasBeenExist(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	client := userRPC.NewUserServiceClient(m.cli.Conn())
	return client.UserIDHasBeenExist(ctx, in, opts...)
}
