package {{ .TableName }}Repository

import (
	"{{ .Package }}/db"
	{{ .TableName }}Dto "{{ .Package }}/template/dto"
	"log"
)

func New{{ .TableName }}Repository() RepositoryInterface {
	return &repository{}
}

type RepositoryInterface interface {
	Get{{ .TableName }}ListRepo(params *{{ .TableName }}Dto.{{ .TableName }}FindRequestDTO) ([]*{{ .TableName }}Dto.{{ .TableName }}FindRequestDTO, error)
	Create{{ .TableName }}RecordRepo(params *{{ .TableName }}Dto.{{ .TableName }}CreateRequestDTO) error
	Update{{ .TableName }}RecordRepo(id string, params *{{ .TableName }}Dto.{{ .TableName }}UpdateRequestDTO) error
	Delete{{ .TableName }}RecordRepo(id string) error
}

type repository struct{}

func (r *repository) Get{{ .TableName }}ListRepo(params *{{ .TableName }}Dto.{{ .TableName }}FindRequestDTO) ([]*{{ .TableName }}Dto.{{ .TableName }}FindRequestDTO, error) {
	querySQL := "SELECT * FROM {{ .TableName }} LIMIT ?,?"
	rows, err := db.DB.Query(querySQL, params.Limit, params.Offset)
	if err != nil {
		return nil, err
	}
	var {{ .TableName }}List []*{{ .TableName }}Dto.{{ .TableName }}FindRequestDTO
	for rows.Next() {
		var params {{ .TableName }}Dto.{{ .TableName }}FindRequestDTO
		if err := rows.Scan({{range .Fields}} &params.{{.Name}}, {{end}}); err != nil {
			log.Fatal(err)
		}
		{{ .TableName }}List = append({{ .TableName }}List, &params)
	}
	return {{ .TableName }}List, nil
}

func (r *repository) Create{{ .TableName }}RecordRepo(params *{{ .TableName }}Dto.{{ .TableName }}CreateRequestDTO) error {
	querySQL := "INSERT INTO {{ .TableName }} ({{range .Fields}} {{.Name}}, {{end}}) VALUES (?,?)"
	if _, err := db.DB.Exec(querySQL, params.Name, params.Age); err != nil {
		return err
	}
	return nil
}

func (r *repository) Update{{ .TableName }}RecordRepo(id string, params *{{ .TableName }}Dto.{{ .TableName }}UpdateRequestDTO) error {
	querySQL := "UPDATE {{ .TableName }} SET {{range .Fields}} {{.Name}}=?,{{end}} WHERE id=?"
	if _, err := db.DB.Exec(querySQL, {{range .Fields}} params.{{.Name}}, {{end}}); err != nil {
		return err
	}
	return nil
}

func (r *repository) Delete{{ .TableName }}RecordRepo(id string) error {
	querySQL := "DELETE FROM {{ .TableName }} WHERE id=?"
    if _, err := db.DB.Exec(querySQL, id); err != nil {
        return err
    }
    return nil
}