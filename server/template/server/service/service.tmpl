package {{ .TableName }}Service

import (
	{{ .TableName }}Dto "{{ .Package }}/template/dto"
	{{ .TableName }}Repository "{{ .Package }}/template/repository"
)

type ServiceInterface interface {
	Get{{ .TableName }}ListService(params *{{ .TableName }}Dto.{{ .TableName }}FindRequestDTO) ([]*{{ .TableName }}Dto.{{ .TableName }}FindRequestDTO, error)
	Create{{ .TableName }}RecordService(params *{{ .TableName }}Dto.{{ .TableName }}CreateRequestDTO) error
	Update{{ .TableName }}ListService(id string, params *{{ .TableName }}Dto.{{ .TableName }}UpdateRequestDTO) error
	Delete{{ .TableName }}RecordService(id string) error
}
type Service struct {
	repo {{ .TableName }}Repository.RepositoryInterface
}

func New{{ .TableName }}Service() *Service {
	return &Service{
		repo: {{ .TableName }}Repository.New{{ .TableName }}Repository(),
	}
}

func (s Service) Get{{ .TableName }}ListService(params *{{ .TableName }}Dto.{{ .TableName }}FindRequestDTO) ([]*{{ .TableName }}Dto.{{ .TableName }}FindRequestDTO, error) {
	return s.repo.Get{{ .TableName }}ListRepo(params)
}

func (s Service) Create{{ .TableName }}RecordService(params *{{ .TableName }}Dto.{{ .TableName }}CreateRequestDTO) error {
	return s.repo.Create{{ .TableName }}RecordRepo(params)
}

func (s Service) Update{{ .TableName }}ListService(id string, params *{{ .TableName }}Dto.{{ .TableName }}UpdateRequestDTO) error {
	return s.repo.Update{{ .TableName }}RecordRepo(id, params)
}


func (s Service) Delete{{ .TableName }}RecordService(id string) error {
	return s.repo.Delete{{ .TableName }}RecordRepo(id)
}